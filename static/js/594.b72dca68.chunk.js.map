{"version":3,"file":"static/js/594.b72dca68.chunk.js","mappings":"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","sources":["components/DishItem/DishItem.styled.js","screens/HomeScreen/HomeScreen.styled.js","components/ShopItem/ShopItem.styled.js","components/ShopItem/ShopItem.js","components/DishItem/DishItem.js","screens/HomeScreen/HomeScreen.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 270px;\n  padding: 8px;\n  gap: 8px;\n\n  list-style: none;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n","import styled from 'styled-components';\n\nexport const ContentWrap = styled.div`\n  display: flex;\n  gap: 16px;\n`;\n\nexport const AsideWrap = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const DishesWrap = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding-left: 32px;\n  gap: 12px;\n`;\n\nexport const TitlePrompt = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n`;\n","import styled from 'styled-components';\n\nexport const Text = styled.p`\n  margin-top: 8px;\n\n  font-size: 12px;\n  font-style: italic;\n\n  color: grey;\n`;\n\nexport const Item = styled.li`\n  list-style: none;\n  padding: 8px;\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: all 250ms ease-in-out;\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  getDishesCountByShopId,\n  getShopDishes,\n} from 'utils/firebaseOperations';\nimport { Item, Text } from './ShopItem.styled';\n\nconst ShopItem = ({ shop, setDishes }) => {\n  const [count, setCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const { shopId, name, photo } = shop;\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n      const dishesCount = await getDishesCountByShopId(shopId);\n      setCount(dishesCount);\n      setIsLoading(false);\n    })();\n  }, [shopId]);\n\n  const handleShopSelect = async () => {\n    const dishes = await getShopDishes(shopId);\n    setDishes(dishes);\n  };\n\n  return (\n    <Item>\n      {!isLoading && (\n        <>\n          <img src={photo} alt={name} width=\"150\" onClick={handleShopSelect} />\n          <h3>{name}</h3>\n          <Text>\n            ({count} {count !== 1 ? 'Dishes' : 'Dish'})\n          </Text>\n        </>\n      )}\n    </Item>\n  );\n};\n\nShopItem.propTypes = {\n  shop: PropTypes.object.isRequired,\n  setDishes: PropTypes.func.isRequired,\n};\n\nexport default ShopItem;\n","import { Item } from './DishItem.styled';\nimport PropTypes from 'prop-types';\n\nconst DishItem = ({ handleAddToCart, dish }) => {\n  const { name, price, photo } = dish;\n\n  return (\n    <Item>\n      <img src={photo} alt={name} width=\"200\" />\n      <h4>{name}</h4>\n      <p>Price: ${price}</p>\n      <button type=\"button\" onClick={() => handleAddToCart(dish)}>\n        Add to cart\n      </button>\n    </Item>\n  );\n};\n\nDishItem.propTypes = {\n  dish: PropTypes.object.isRequired,\n  handleAddToCart: PropTypes.func.isRequired,\n};\n\nexport default DishItem;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport {\n  AsideWrap,\n  DishesWrap,\n  ContentWrap,\n  TitlePrompt,\n} from './HomeScreen.styled';\nimport { getAllShops } from 'utils/firebaseOperations';\nimport ShopItem from 'components/ShopItem/ShopItem';\nimport DishItem from 'components/DishItem/DishItem';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst initialShopsState = [];\n\nconst HomeScreen = ({ cartItems, setCartItems }) => {\n  const [shops, setShops] = useState(initialShopsState);\n  const [dishes, setDishes] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const shops = await getAllShops();\n      setShops(shops);\n    })();\n  }, []);\n\n  const handleAddToCart = product => {\n    const existingItem = cartItems.find(item => item.dishId === product.dishId);\n\n    if (existingItem) {\n      const updatedItems = cartItems.map(item => {\n        if (item.dishId === product.dishId) {\n          return {\n            ...item,\n            quantity: item.quantity + 1,\n          };\n        }\n        return item;\n      });\n\n      setCartItems(updatedItems);\n      return;\n    }\n\n    const newCartItem = {\n      ...product,\n      quantity: 1,\n    };\n\n    setCartItems(prevState => [...prevState, newCartItem]);\n    toast.success('Added to cart');\n  };\n\n  return (\n    <>\n      <TitlePrompt>\n        <h2>Welcome to FetchFood Delivery üçü</h2>\n        <p>Choose a restaurant to deliver food from</p>\n      </TitlePrompt>\n      <ContentWrap>\n        <AsideWrap>\n          {shops &&\n            shops.map(shop => (\n              <ShopItem key={shop.shopId} shop={shop} setDishes={setDishes} />\n            ))}\n        </AsideWrap>\n\n        <DishesWrap>\n          {dishes &&\n            dishes.map(dish => (\n              <DishItem\n                key={dish.dishId}\n                dish={dish}\n                handleAddToCart={handleAddToCart}\n              />\n            ))}\n        </DishesWrap>\n      </ContentWrap>\n    </>\n  );\n};\n\nHomeScreen.propTypes = {\n  cartItems: PropTypes.array.isRequired,\n  setCartItems: PropTypes.func.isRequired,\n};\n\nexport default HomeScreen;\n"],"names":["Item","styled","ContentWrap","AsideWrap","DishesWrap","TitlePrompt","Text","shop","setDishes","useState","count","setCount","isLoading","setIsLoading","shopId","name","photo","useEffect","getDishesCountByShopId","dishesCount","handleShopSelect","getShopDishes","dishes","src","alt","width","onClick","handleAddToCart","dish","price","type","initialShopsState","cartItems","setCartItems","shops","setShops","getAllShops","product","find","item","dishId","updatedItems","map","quantity","newCartItem","prevState","toast"],"sourceRoot":""}